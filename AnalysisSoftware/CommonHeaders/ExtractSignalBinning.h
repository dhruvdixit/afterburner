// provided by Gamma Conversion Group, $ALICE_ROOT/PWG4/GammaConv ;https://twiki.cern.ch/twiki/bin/view/ALICE/PWG4GammaConversion

#include "ConversionFunctionsBasicsAndLabeling.h"

Int_t fStartPtBin                               = 0;
Int_t fColumn                                   = 0; 
Int_t fRow                                      = 0;    
Int_t fNBinsPt                                  = 0;    
Double_t *fBinsPt                               = NULL;
Int_t* fNRebin                                  = NULL;
Int_t fNBinsPtDCAzDist                          = 0;
Double_t *fBinsPtDCAzDist                       = NULL;
Int_t fExampleBin                               = 0;
Int_t fNBinsPeakPt                              = 12;
Double_t fBinsPeakPt[13]                        = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 3.0,
                                                    4.0, 5.0, 7.0};
Int_t fBinsPeakPtRebin[12]                      = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 4, 
                                                    4, 8};
Double_t fBinsPeakPtHalf[13]                    = { 0.0, 0.2, 0.3, 0.4, 0.5,
                                                    0.6, 0.7, 0.8, 1.0, 1.5,
                                                    2.0, 2.5, 3.5};

//******************** Pt binning for pp, 7 TeV ***************************************************
Double_t fBinsPi07TeVPt[33]                     = { 0.0, 0.3, 0.4, 0.5, 0.6, 
                                                    0.8, 1.0, 1.2, 1.4, 1.6, 
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0};
Double_t fBinsPi07TeVPtDCA[22]                  = { 0.0, 0.3, 0.4, 0.6, 0.8,
                                                    1.0, 1.2, 1.4, 1.6, 2.0,
                                                    2.4, 2.8, 3.2, 3.6, 4.0,
                                                    5.0, 6.0, 8.0, 12.0, 16.0,
                                                    20.0, 25.0};
Int_t fBinsPi07TeVPtRebin[32]                   = { 2, 2, 1, 1, 1, 
                                                    1, 1, 1, 1, 1, 
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    2, 4, 4, 4, 5,
                                                    5, 5};
Int_t fBinsPi07TeVConvEMCALPtRebin[32]          = { 2, 2, 1, 1, 2,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    2, 4, 4, 4, 5,
                                                    5, 5};
Double_t fBinsEta7TeVPt[16]                     = { 0.0, 0.4, 0.7, 1.0, 1.4,
                                                    1.8, 2.2, 2.6, 3.0, 3.5,
                                                    4.0, 6.0, 8.0, 10.0, 12.0, 16.0};
Double_t fBinsEta7TeVConvEMCALPt[16]            = { 0.0, 0.4, 0.6, 1.0, 1.4,
                                                    1.8, 2.2, 2.6, 3.0, 3.5,
                                                    4.0, 6.0, 8.0, 10.0, 12.0, 16.0};
Int_t fBinsEta7TeVPtRebin[15]                   = { 8, 5, 5, 4, 4,
                                                    4, 4, 5, 5, 5, 
                                                    5, 5, 5, 5, 5};
Int_t fBinsEta7TeVConvEMCALPtRebin[15]          = { 8, 5, 16, 10, 8,
                                                    8, 8, 8, 8, 8,
                                                    8, 8, 10, 16, 5};
Int_t fBinsPi0EtaBinning7TeVPtRebin[15]         = { 8, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2, 
                                                    2, 4, 4, 4, 4};
Double_t fBinsEtaPrim7TeVPt[8]                  = {0.0, 0.5, 1.0, 2.0, 3.0,
                                                    4.0, 6.0, 10.0}; 
Int_t fBinsEtaPrim7TeVPtRebin[7]                = { 8, 2, 2, 2, 2, 
                                                    2, 2};
Double_t fBinsPi07TeVDirectPhotonPt[24]         = { 0.0, 0.3, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.4, 2.8, 3.2, 3.6, 4.2,
                                                    4.8, 5.8, 7.0, 8.5, 10.0,
                                                    12.0, 16.0, 20.0, 25.0};
Int_t fBinsPi07TeVDirectPhotonPtRebin[23]       = { 2, 2, 1, 1, 1, 
                                                    1, 1, 1, 1, 1, 
                                                    1, 1, 1, 2, 2,
                                                    2, 2, 4, 4, 4,
                                                    5, 5, 5};

//******************** Pt binning for pp, 8 TeV ***************************************************
Double_t fBinsPi08TeVPt[34]                     = { 0.0, 0.3, 0.4, 0.5, 0.6, 
                                                    0.8, 1.0, 1.2, 1.4, 1.6, 
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0, 30.0};

Double_t fBinsPi08TeVPtConvEMCAL[29]            = { 0.0, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 25.0};

Double_t fBinsPi08TeVPtConvEMCALTrigger[45]     = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.2,
                                                    3.4, 3.6, 3.8, 4.0, 4.2,
                                                    4.4, 4.6, 4.8, 5.0, 5.2,
                                                    5.4, 5.6, 5.8, 6.0, 6.4,
                                                    6.8, 7.2, 7.6, 8.0, 8.5,
                                                    9.0, 10.0, 11.0, 12.0, 13.0,
                                                    14.0, 16.0, 20.0, 25.0, 30.0};

Double_t fBinsPi08TeVPtEMCAL[33]                = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 10.0, 12.0,
                                                    16.0, 20.0, 25.0};
Double_t fBinsPi08TeVPtEMCALTrigger[39]         = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.2, 3.4, 3.6,
                                                    3.8, 4.0, 4.5, 5.0, 5.5,
                                                    6.0, 7.0, 8.0, 9.0, 10.0, 
                                                    11.0, 12.0, 13.0, 14.0, 15.0,
                                                    16.0, 18.0, 20.0, 25.0};

Double_t fBinsPi08TeVPtDCA[23]                  = { 0.0, 0.3, 0.4, 0.6, 0.8,
                                                    1.0, 1.2, 1.4, 1.6, 2.0,
                                                    2.4, 2.8, 3.2, 3.6, 4.0,
                                                    5.0, 6.0, 8.0, 10.0, 12.0, 16.0,
                                                    20.0, 25.0};
Int_t fBinsPi08TeVPtRebin[33]                   = { 2, 4, 2, 1, 1, 
                                                    1, 1, 1, 1, 1, 
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    5, 5, 5};
Int_t fBinsPi08TeVEMCALPtRebin[32]              = { 2, 2, 2, 2, 2,
                                                    2, 2, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 4,
                                                    4, 4, 4, 4, 5,
                                                    2, 2};
Int_t fBinsPi08TeVEMCALTriggerPtRebin[39]        = { 4, 4, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 4,
                                                    4, 4, 8, 8, 8,
                                                    8, 8, 8, 8, 8,
                                                    8, 8, 8, 8};
Int_t fBinsPi08TeVConvEMCALPtRebin[28]          = { 2, 2,
                                                    4, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 4,
                                                    4, 4, 5, 8, 16,
                                                    2};
Int_t fBinsPi08TeVConvEMCALPtRebinTrigger[44]   = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 8, 16};
Double_t fBinsEta8TeVPt[20]                     = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6, 
                                                    4.0, 5.0, 6.0, 8., 10.,
                                                    12., 14., 16., 18., 20.};
Double_t fBinsEta8TeVConvEMCALPt[20]            = { 0.0, 0.4, 0.8, 1.2, 1.6,
                                                    2.0, 2.4, 2.8, 3.2, 3.6,
                                                    4.0, 5.0, 6.0, 8., 10.,
                                                    12., 14., 16., 18., 20.};
Int_t fBinsEta8TeVPtRebin[19]                   = { 8, 6, 6, 4, 4,
                                                    4, 4, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5};
Int_t fBinsEta8TeVEMCALPtRebin[19]              = { 4, 4, 4, 10, 10,
                                                    10, 8, 8, 8, 8,
                                                    8, 8, 8, 8, 8,
                                                    10, 20, 4, 4};
Int_t fBinsEta8TeVConvEMCALPtRebin[19]          = { 20, 20, 20, 10, 8,
                                                    8, 8, 8, 8, 8,
                                                    8, 8, 8, 8, 20,
                                                    20, 20, 20, 20};
Int_t fBinsPi0EtaBinning8TeVPtRebin[19]         = { 8, 1, 1, 1, 1, 
                                                    1, 1, 2, 2, 2, 
                                                    2, 4, 4, 4, 4,
                                                    4, 4, 4, 4};
Int_t fBinsPi0EtaBinning8TeVConvEMCALPtRebin[19] = {8, 2, 2, 2, 2,
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 8, 8,
                                                    8, 8, 8, 8};
//******************** Pt binning for pp, 0.9 TeV ***************************************************
Double_t fBinsPi0900GeVPt[12]                   = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 2.5,
                                                    3.5, 4.5};
Int_t fBinsPi0900GeVPtRebin[11]                 = { 4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4, 
                                                    4};
Double_t fBinsEta900GeVPt[4]                    = { 0., 0.9, 1.8, 3.0};
Int_t fBinsEta900GeVPtRebin[4]                  = { 8, 5, 5};
Int_t fBinsPi0EtaBinning900GeVPtRebin[4]        = { 8, 4, 4};
Double_t fBinsPi0900GeVDirectPhotonPt[8]        = { 0.0, 0.6, 0.8, 1.0, 1.3, 
                                                    2.0, 3.0, 4.5};
Int_t fBinsPi0900GeVDirectPhotonPtRebin[7]      = { 4, 2, 2, 2, 2, 
                                                    2, 4};
                                                
//******************** Pt binning for pp, 13 TeV ***************************************************
//Double_t fBinsPi013TeVPt[21]                  = { 0.0, 0.4, 0.6, 0.8, 1.0,         
//                                                  1.2, 1.4, 1.6, 1.8, 2.0, 
//                                                  2.2, 2.5, 2.9, 3.0, 3.5,
//                                                  5.0, 10.0, 16.0, 18.0, 20.0, 22.0};     //Pi0 single period binning
Double_t fBinsPi013TeVPt[21]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,         
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 2.9, 3.3, 
                                                    3.9, 5.1, 6.5, 8.0, 11.0, 
                                                    16.0};                                  //Pi0 merged period binning (3 periods)
Int_t fBinsPi013TeVPtRebin[24]                  = { 4, 4, 2, 2, 2,                                 // Rebinning Pi0
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};

//Double_t fBinsPi013TeVPtDCA[21]               = { 0.0, 0.4, 0.6, 0.8, 1.0,              	//Pi0 single period DCA binning     
//                                                  1.2, 1.4, 1.6, 1.8, 2.0, 
//                                                  2.2, 2.5, 2.9, 3.0, 3.5,
//                                                  5.0, 10.0, 16.0, 18.0, 20.0, 
//                                                  22.0};

Double_t fBinsPi013TeVPtDCA[21]                 = { 0.0, 0.4, 0.6, 0.8, 1.0,         
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 2.9, 3.3, 
                                                    3.9, 5.1, 6.5, 8.0, 11.0, 
                                                    16.0};                                  //Pi0 merged period DCA binning (3 periods)

//Double_t fBinsEta13TeVPt[14]                  = { 0., 0.5, 1.5, 2.0, 3.0,                 // Eta binning for 1 period  
//                                                  4.0, 6.0, 8.0, 10., 12.5,
//                                                  15., 20., 25., 30. };

Double_t fBinsEta13TeVPt[14]                    = { 0.0, 0.5, 1.0, 1.5, 2.0,                // Eta binning for 3 merged periods        
                                                    2.5, 3.0, 3.5, 4.0, 5.0, 
                                                    6.0, 7.0, 9.0, 12.0};

Int_t fBinsEta13TeVPtRebin[13]                  = { 8, 8, 5, 5, 5,                          // Rebinning Eta
                                                    5, 8, 8, 8, 8,
                                                    10, 10, 10};

//Double_t fBinsEta13TeVPtDCA[14]               = { 0., 0.5, 1.5, 2.0, 3.0,                 // Eta DCA binning for 1 period  
//                                                  4.0, 6.0, 8.0, 10., 12.5,
//                                                  15., 20., 25., 30. };

Double_t fBinsEta13TeVPtDCA[14]                 = { 0.0, 0.5, 1.0, 1.5, 2.0,                // Eta DCA binning for 3 merged periods        
                                                    3.0, 5.0, 7.0, 12.0, 13.0,
                                                    14.0, 15.0, 16.0, 20.0};

Int_t fBinsPi0EtaBinning13TeVPtRebin[13]        = { 8, 2, 2, 2, 2,                          // rebinning Pi0EtaBinning
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4 };

Double_t fBinsPi013TeVDirectPhotonPt[27]        = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 2.8, 3.0,
                                                    3.4, 3.8, 4.2, 5.0, 6.0,
                                                    7.0, 8.0, 9.0, 10.0, 12.0,
                                                    15.0, 20.0};

Int_t fBinsPi013TeVDirectPhotonPtRebin[29]      = { 4, 4, 4, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};

//Double_t fBinsPi013TeVDirectPhotonPtDCAzDist[21]= { 0.0, 0.4, 0.6, 0.8, 1.0,
//                                                    1.2, 1.4, 1.6, 1.8, 2.0,
//                                                    2.4, 2.8, 3.2, 3.5, 4.0,
//                                                    5.0, 7.0, 9.0, 12.0, 15.0,
//                                                    20.0};

Double_t fBinsPi013TeVDirectPhotonPtDCAzDist[16]= { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.5, 4.0, 6.0, 9.0, 13.0,
                                                    20.0};


//******************** Pt binning for pp, 2.76 TeV ***************************************************
Double_t fBinsPi02760GeVPt[25]                  = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0,
                                                    12.0, 15.0, 20., 25., 30.};

Double_t fBinsPi02760GeVPtTrig13g[30]           = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 11.0, 12.0, 14.0, 
                                                    16.0, 20., 24., 28., 30.};
Double_t fBinsPi02760GeVPtTrig13gConvEMCAL[29]  = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0,
                                                    20., 24., 28., 30.};

Double_t fBinsPi02760GeVPtTrig11a[26]           = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 16.0, 20.0,
                                                    25};
Double_t fBinsPi02760GeVPtTrigFullPCMEMC[25]    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 12.0, 14.0, 16.0 };
Double_t fBinsPi02760GeVPtMerged[33]            = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0, 
                                                    2.2, 2.4, 2.6, 3.0, 3.5, 
                                                    4.0, 5.0, 6.0, 7.0, 8.0,
                                                    9.0, 10.0, 11.0, 12.0, 14.0, 
                                                    16.0, 18., 22., 26., 30.,
                                                    35.0, 40., 50.};
                                                
Double_t fBinsPi02760GeVPtDCA[15]               = { 0.0, 0.4, 0.6, 0.8, 1.0, 
                                                    1.2, 1.4, 1.6, 2.0, 2.4, 
                                                    3.0, 4.0, 6.0, 8.0, 10.0};
Int_t fBinsPi02760GeVPtRebin[24]                = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4, 8,
                                                    8, 8, 8, 8};
Int_t fBinsPi02760GeVConvEMCALPtRebin[24]       = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 4};
Int_t fBinsPi02760GeVConvEMCALPtTrig13gRebin[28]= { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 8, 8,
                                                    8, 8, 8};
Int_t fBinsPi02760GeVEMCALPtTrig13gRebin[29]    = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4, 4, 8,
                                                    12, 12, 12, 12};

Int_t fBinsPi02760GeVConvEMCALPtTrig11aRebin[25]= {4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 5,
                                                    5, 5, 10, 10, 10};
Int_t fBinsPi02760GeVPtMergedRebin[32]          = { 2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4,
                                                    5, 5 };

Double_t fBinsPi02760GeVFullHaitoMerged[34]     =  {    0.0,    0.4,    0.6,    0.8,    1.0, 
                                                        1.2,    1.4,    1.6,    1.8,    2.0, 
                                                        2.2,    2.4,    2.6,    3.0,    3.5, 
                                                        4.0,    5.0,    6.0,    7.0,    8.0, 
                                                        9.0,    10.0,   11.0,   12.0,   13.0,
                                                        14.0,   16.0,   18.,    22.0,   26.0,
                                                        30.0,   35.0,   40.0,   50.0    };
                                                    
                                                    
                                                    
Double_t fBinsEta2760GeVPtAsPbPb[10]            = { 0., 0.5, 1.0, 1.5, 2.0, 
                                                    2.5, 4.0, 6.0, 8.0,
                                                    10.};                                                
Double_t fBinsEta2760GeVPt[14]                  = { 0., 0.5, 1.0, 1.5, 2.0,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0, 14.0, 20.0, 30.0};
Double_t fBinsEta2760GeVPtTrig11a[14]           = { 0., 0.5, 1.0, 1.5, 2.0,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0, 16.0, 20.0, 30.0};

Double_t fBinsEta2760GeVPtDCA[16]               = { 0., 0.4, 0.6, 0.8, 1.0,
                                                    1.125, 1.5, 1.75, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 10.0, 15.0, 
                                                    20.0 };
Int_t fBinsEta2760GeVPtRebinAsPbPb[9]           = { 8, 8, 5, 5, 5, 
                                                    5, 8, 10, 10};
Int_t fBinsEta2760GeVPtRebin[13]                = { 10, 10, 10, 10, 10,
                                                    10, 10, 16, 16, 16,
                                                    16, 16, 16};
Int_t fBinsEta2760GeVConvEMCALPtRebin[13]       = { 15, 15, 12, 12, 10, 
                                                    10, 10, 10, 10, 10,
                                                    10, 10, 10 };
Int_t fBinsEta2760GeVConvEMCALPtEG2Rebin[13]    = { 15, 15, 12, 12, 10, 
                                                    10, 10, 10, 12, 20,
                                                    15, 15, 15 };

Int_t fBinsEta2760GeVConvEMCALPtTrigINT7Rebin[13] = {8, 10, 10, 10, 10, 
                                                    10, 10, 12, 12, 12,
                                                    12, 12, 12 };

Int_t fBinsEta2760GeVConvEMCALPtTrig11aRebin[13] = {8, 8, 8, 8, 8, 
                                                    8, 8, 8, 10, 16,
                                                    16, 16, 16 };

Int_t fBinsPi0EtaBinning2760GeVPtRebin[13]      = { 8, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4,
                                                    4, 4, 4 };
Int_t fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[13] = {8, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4,
                                                    4, 5, 5 };
Int_t fBinsPi0EtaBinning2760GeVConvEMCALPtTrig11aRebin[13] = {4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 4,
                                                    4, 5, 5 };

Double_t fBinsPi02760GeVDirectPhotonPt[16]      = { 0.0, 0.3, 0.6, 0.8, 1.0, 
                                                    1.2, 1.5, 1.8, 2.3, 2.8, 
                                                    3.3, 3.9, 4.5, 5.5, 7.0, 
                                                    10.0};
Int_t fBinsPi02760GeVDirectPhotonPtRebin[15]    = { 4, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 4, 4, 4};

// ***************** Pt binning for PbPb, 2.76 TeV *************************************
Double_t fBinsPi0HIPt[25]                       = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0, 
                                                    12.0, 14.0,16.0, 20.,25.};
Double_t fBinsPi0HIPtLHC11h[24]                 = { 0.0, 0.4, 0.6, 0.8, 1.0, //same as the above but for the last bins, similar to the EMCal bins {4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 20.0, 30.0}; 
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.2, 2.4, 2.6, 3.0, 3.5,
                                                    4.0, 5.0, 6.0, 8.0, 10.0, 
                                                    12.0, 14.0, 20.,30.};
Double_t fBinsPi0HIPtNew[18]                    = { 0.0, 0.5, 0.8, 1.0, 1.2,
                                                    1.4, 1.6, 1.8, 2.0, 2.2, 
                                                    2.4, 2.6, 3.0, 4.0, 6.0, 
                                                    8.0, 10.0, 12.0};
Double_t fBinsPi0HIPeripheralPt[16]             = { 0.0, 0.5, 0.8, 1.0, 1.2,
                                                    1.4, 1.6, 1.8, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 8.0, 10.0,
                                                    12.0 };
Double_t fBinsPi0HIPtDCA[16]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 1.8, 2.0,
                                                    2.25, 2.5,3.0, 4.0, 6.0,
                                                    12.};
Double_t fBinsPi0HIPtDCAPer[12]                 = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 2.0, 2.5, 3., 
                                                    6., 10.};  
Double_t fBinsEtaHIPtDCA[14]                    = { 0.0, 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.5, 2.0, 2.5, 3.0,
                                                    4.0, 6.0, 10., 12.};
Int_t fBinsPi0HIPtRebin[24]                     = { 10, 8, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 4,
                                                    4, 8, 8, 8};
Int_t fBinsPi0HIPtLHC11hRebin[23]               = { 10, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 4, 4, 4, 4,
                                                    4, 8, 8};
Int_t fBinsPi0HIPtRebinNew[17]                  = {10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 5,
                                                    5, 8};
Int_t fBinsPi0HIPeripheralPtRebin[15]           = {10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 8, 8, 8};
Double_t fBinsEtaHIPt[5]                        = { 0.0, 1.5, 2.0, 4.0, 7.0};
Double_t fBinsEtaHIPtLHC11h[17]                 = { 0.0, 0.6, 1.0, 1.4, 1.8,
                                                    2.2, 2.6, 3.0 ,3.5, 4., 5.,
                                                    6.0, 8.0, 10, 12., 15.,
                                                    19.};
Double_t fBinsEtaHIPtLHC11hLessBins[13]         = { 0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 
                                                    4., 6.0, 8.0, 10., 12., 
                                                    15., 19.};

Int_t fBinsEtaHIPtRebin[4]                      = { 10, 8, 5, 5};
Int_t fBinsEtaHIPtRebinLHC11h[16]               = { 10, 8, 8, 4, 4,
                                                    4, 5, 5, 8, 8, 8,
                                                    8, 10, 10, 10, 10};
Int_t fBinsEtaHIPtRebinLHC11hFinerBinning[15]   = { 10, 8, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    8, 8, 8, 8, 8};
Int_t fBinsEtaHIPtRebinLHC11hLessBins[12]       = { 10, 8, 5, 5, 5, 
                                                    5, 5, 8, 8, 10, 
                                                    10, 10};

Int_t fBinsPi0EtaBinningHIPtRebin[4]            = { 10, 2, 2, 2};

Double_t fBinsPi0HIDirectPhotonPt[20]           = { 0.0, 0.4, 0.8, 1.0, 1.2, 
                                                    1.4, 1.6, 1.8, 2.0, 2.3, 
                                                    2.7, 3.1, 3.5, 4.0, 4.5,
                                                    5.5, 6.5, 8.0, 11.0, 14.0};
Int_t fBinsPi0HIDirectPhotonPtRebin[19]         = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4};

// ***************** Pt binning for pPb, 5.023 TeV *************************************
Double_t fBinsPi0pPbPt[38]                      = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 1.0, 1.2, 1.4,
                                                    1.6, 1.8, 2.0, 2.2, 2.4,
                                                    2.6, 2.8, 3.0, 3.2, 3.4,
                                                    3.6, 3.8, 4.0, 4.5, 5.0,
                                                    5.5, 6.0, 7.0, 8.0, 10.0,
                                                    12.0, 14.0, 16.0, 18.0, 20.0,
                                                    22.0, 26.0, 30.0};
Double_t fBinsPi0pPbPtEMCTrig[43]                = { 0.0, 0.3, 0.4, 0.5, 0.6,
                                                    0.7, 0.8, 1.0, 1.2, 1.4,
                                                    1.6, 1.8, 2.0, 2.2, 2.4,
                                                    2.6, 2.8, 3.0, 3.2, 3.4,
                                                    3.6, 3.8, 4.0, 4.5, 5.0,
                                                    5.5, 6.0, 7.0, 8.0, 9.0,
                                                    10.0, 11.0, 12.0, 13.0, 14.0,
                                                    15.0, 16.0, 17.0, 18.0, 20.0,
                                                    22.0, 26.0, 30.0};

Double_t fBinsPi0pPbPtDCA[13]                   = { 0.0, 0.4, 0.5, 0.6, 0.7,
                                                    0.8, 1.0, 1.4, 1.8, 2.4,
                                                    4.0, 6.0, 14.0};
Double_t fBinsPi0pPbPt_Cent[25]                 = { 0.0, 0.4, 0.5, 0.6, 0.7,
                                                    0.8, 1.0, 1.2, 1.4, 1.6,
                                                    1.8, 2.0, 2.2, 2.4, 2.6,
                                                    2.8, 3.0, 3.5, 4.0, 5.0,
                                                    6.0, 8.0, 10.0, 12.0, 14.0};
Int_t fBinsPi0pPbPtRebin[37]                    = { 10, 8, 4, 2, 2,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2,
                                                    4, 5, 8, 8, 10,
                                                    10,10, 10, 10,10,
                                                    10,10};
Int_t fBinsPi0pPbConvEMCALPtRebin[37]           = { 10, 8, 8, 8, 8,
                                                    4, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 2, 2, 4, 5,
                                                    5, 5, 5, 8, 8,
                                                    8, 10};
Int_t fBinsPi0pPbConvEMCALTrigPtRebin[42]       = { 10, 8, 8, 8, 8,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    8, 8, 8, 8, 8,
                                                    8, 10};
Int_t fBinsPi0pPbConvEMCALTrigEG1PtRebin[42]    = { 10, 8, 8, 8, 8,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 8,
                                                    8, 10};

Int_t fBinsPi0pPbConvPHOSPtRebin[37]            = { 5, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 10};

Int_t fBinsPi0pPbEMCALPtRebin[37]               = { 5, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 5,
                                                    5, 5, 5, 5, 5,
                                                    5, 5};
Int_t fBinsPi0pPbPHOSPtRebin[37]                = { 5, 4, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    2, 2, 2, 2, 2,
                                                    5, 5, 5, 5, 5,
                                                    5, 5};

Int_t fBinsPi0pPbPtRebin_Cent[24]               = { 10, 4, 4, 4, 4,
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4, 
                                                    4, 4, 4, 4, 4, 
                                                    4, 5, 10, 10}; 

Double_t fBinsEtapPbPt[23]                      = { 0., 0.3, 0.5, 0.7, 0.9, 
                                                    1.1, 1.4, 1.8, 2.2, 2.6,
                                                    3.0, 3.5, 4.,  5.,  6.,
                                                    8.,  10,  12., 14., 16., 
                                                    20., 25., 30.};
Double_t fBinsEtapPbPtEMCTrig[27]               = { 0., 0.3, 0.5, 0.7, 0.9, 
                                                    1.1, 1.4, 1.8, 2.2, 2.6,
                                                    3.0, 3.5, 4.,  5.,  6.,
                                                    7.,  8., 9., 10, 11.,
                                                    12., 13., 14., 18., 20.,
                                                    24., 30.};

Double_t fBinsEtapPbPt_Cent[15]                 = { 0.,  0.4,  0.6,  0.8,  1.0,
                                                    1.2, 1.4,  1.6,  2.0,  2.5,
                                                    3.0, 4.,   6.,   8.,   10};
                                        
Double_t fBinsEtapPbPtDCA[6]                    = { 0., 0.5, 1.0, 2.0, 4.,
                                                    8.};
Int_t fBinsEtapPbPtRebin[22]                    = { 10, 8,  8,  8,  5,
                                                    5,   5,  5,  4,  4,
                                                    4,   5,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbConvEMCALPtRebin[22]           = { 10, 10,  10,  10,  8,
                                                    8,   5,  5,  5,  5,
                                                    5,   5,  8,  8,  8,
                                                    8,   12, 12, 20, 20,
                                                    20,  20};
Int_t fBinsEtapPbConvEMCALTrigPtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8, 10, 12,
                                                    20};
Int_t fBinsEtapPbConvEMCALTrigEG2PtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    10,   10,  10,  10,  10,
                                                    10,   10,  10, 12, 20,
                                                    20};

Int_t fBinsEtapPbConvEMCALTrigEMC7PtRebin[26]       = { 10, 10,  10,  10,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  10,
                                                    10,   10,  10,  10,  10,
                                                    10,   10,  10, 10, 12,
                                                    20};

Int_t fBinsEtapPbConvPHOSPtRebin[22]            = { 10, 8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   8,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbEMCALPtRebin[22]               = { 10, 8,  8,  8,  5,
                                                    5,   5,  5,  4,  4,
                                                    4,   5,  5,  5,  5,
                                                    8,   8,  8,  8,  8,
                                                    8,   8};
Int_t fBinsEtapPbPHOSPtRebin[22]                = { 10, 8,  8,  8,  5,
                                                    5,   5,  5,  4,  4,
                                                    4,   5,  8,  8,  8,
                                                    8,   10, 10, 10, 10,
                                                    10,  10};
Int_t fBinsEtapPbPtRebin_Cent[14]               = { 10, 10, 8, 8, 8, 
                                                    5,  5,  4,  4, 4,
                                                    4,  5,  8,  
                                                    10};   
Int_t fBinsPi0EtaBinningpPbPtRebin[22]          = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbConvEMCALPtRebin[22] = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbConvPHOSPtRebin[22]  = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 2, 2, 2,
                                                    4, 4, 4, 4, 4,
                                                    4, 4};
Int_t fBinsPi0EtaBinningpPbEMCALPtRebin[22]     = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 2, 2, 
                                                    2, 2};
Int_t fBinsPi0EtaBinningpPbPHOSPtRebin[22]      = { 8, 2, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    1, 1, 1, 1, 1,
                                                    2, 2, 2, 4, 4,
                                                    4, 4};

Double_t fBinsEtapPbPt3Body[15]                 = { 0., 0.4, 0.6, 0.8, 1.0,
                                                    1.2, 1.4, 1.6, 2.0, 2.5,
                                                    3.0, 4.0, 6.0, 8.0, 10};
Int_t fBinsEtapPbPt3BodyRebin[14]               = { 5, 5, 5, 5, 5, 
                                                    5, 5, 5, 5, 5,
                                                    5, 5, 5, 5};
Double_t fBinsPi0pPbDirectPhotonPt[20]          = { 0.0, 0.4, 0.8, 1.0, 1.2, 
                                                    1.4, 1.6, 1.8, 2.0, 2.3, 
                                                    2.7, 3.1, 3.5, 4.0, 4.5,
                                                    5.5, 6.5, 8.0, 11.0, 14.0};
Int_t fBinsPi0pPbDirectPhotonPtRebin[19]        = { 4, 4, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 2, 2, 2, 2, 
                                                    2, 4, 4, 4};

//*************************************************************************************************
//******************** Initialize binning for analysis stream  ************************************
//*************************************************************************************************
void InitializeBinning(TString setPi0, Int_t numberOfBins, TString energy, TString directPhoton, Int_t modi, TString eventCutSelection, TString clusterCutSelection, Int_t triggerSet = -1){
    //*************************************************************************************************
    //************************************ Binning for Pi0 ********************************************
    //*************************************************************************************************
    if (setPi0.CompareTo("Pi0") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[70];
        fNRebin                 = new Int_t[69];
        //*********************************************************************************************
        //********************************** Pi0 for pp 7TeV*******************************************
        //*********************************************************************************************
        if (energy.CompareTo("7TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                if (modi == 4 || modi == 2 ) fStartPtBin = 4;
                fColumn         = 5;
                fRow            = 5;                                
                if (fNBinsPt > 24) {
                    cout << "You have chosen Direct Photon Plots and more than 24 bins, this is not possible, it will be reduced to 24 bins." << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi07TeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi07TeVDirectPhotonPtRebin[i];
                }
                fExampleBin     = 16;
            } else {
                fStartPtBin     = 1;
                if (modi == 4 || modi == 2 ) fStartPtBin = 4;
                fColumn         = 7;
                fRow            = 5;

                if (fNBinsPt > 32) {
                    cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                    fNBinsPt    = 32;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi07TeVPt[i];

                    if (modi == 2 ){ //|| modi == 4){
                        if (i < fNBinsPt) fNRebin[i] = fBinsPi07TeVConvEMCALPtRebin[i];
                    } else {
                        if (i < fNBinsPt) fNRebin[i] = fBinsPi07TeVPtRebin[i];
                    }
                }
                fExampleBin     = 16;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 8TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("8TeV") == 0) {
            Int_t specialTrigg      = 0;
            TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);

            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1; // L0 EMC7
                } else if ( trigger.CompareTo("81") == 0 ){
                    specialTrigg = 2; //L1 INT7 EGA
                } else if ( trigger.CompareTo("53") == 0 ){
                    specialTrigg = 3; // L0 EMC8
                } else if ( trigger.CompareTo("82") == 0 ) {
                    specialTrigg = 4; // L1 INT8 EGA
                }
            } else {
                specialTrigg        = triggerSet;
            }

            fStartPtBin                        = 1;
            if (modi == 4 ) fStartPtBin = 7;
            if (modi == 2 ) fStartPtBin = 2;

            if(modi == 2 && specialTrigg == 1) fStartPtBin = 9;
            if(modi == 2 && specialTrigg == 1) fNBinsPt = 41;
            if(modi == 2 && specialTrigg == 2) fStartPtBin = 35;
            if(modi == 2 && specialTrigg == 2) fNBinsPt = 44;

            fColumn             = 6;
            fRow                = 5;

            if (fNBinsPt - fStartPtBin > 29){
                fColumn     = 6;
                fRow        = 6;
            }
            if (fNBinsPt - fStartPtBin < 25){
                fColumn     = 5;
                fRow        = 5;
            }
            if (fNBinsPt - fStartPtBin < 20){
                fColumn     = 5;
                fRow        = 4;
            }
            if (fNBinsPt - fStartPtBin < 15){
                fColumn     = 5;
                fRow        = 3;
            }
            if (fNBinsPt - fStartPtBin < 10){
                fColumn     = 4;
                fRow        = 3;
            }

            if (fNBinsPt > 33 && modi != 2 && modi != 3 && modi != 4) {
                cout << "You have chosen to have more than 33 bins, this is not possible, it will be reduced to 33" << endl;
                fNBinsPt        = 33;
            } else if (fNBinsPt > 32 && (modi ==4)){
                cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                fNBinsPt        = 32;
            } else if (fNBinsPt > 28 && (modi == 2 || modi == 3)){
                if( specialTrigg == 2 && fNBinsPt > 44){
                  cout << "You have chosen to have more than 44 bins, this is not possible, it will be reduced to 44" << endl;
                  fNBinsPt        = 44;
                } else if ( specialTrigg == 1 && fNBinsPt > 41){
                  cout << "You have chosen to have more than 41 bins, this is not possible, it will be reduced to 41" << endl;
                  fNBinsPt = 41;
                } else {
                  cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28" << endl;
                  fNBinsPt        = 28;
                }
            }

//            if (modi ==4){
//                if (trigger.CompareTo("52") == 0 || trigger.CompareTo("81") == 0){
//                    fNBinsPt 	= 38;
//                } else if (fNBinsPt > 33){
//                    cout << "You have chosen to have more than 33 bins, this is not possible, it will be reduced to 33" << endl;
//                    fNBinsPt 	= 33;
//                }
//            }

            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if (modi == 4 ){
                    fBinsPt[i]                 = fBinsPi08TeVPtEMCAL[i];
                } else if (modi == 2){
                  if(specialTrigg > 0)
                    fBinsPt[i]                 = fBinsPi08TeVPtConvEMCALTrigger[i];
                  else
                    fBinsPt[i]                 = fBinsPi08TeVPtConvEMCAL[i];
                } else {
                    fBinsPt[i]                 = fBinsPi08TeVPt[i];
                }

                if (modi == 2){
                  if( specialTrigg > 0 ){
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvEMCALPtRebinTrigger[i];
                  }else{
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVConvEMCALPtRebin[i];
                  }
                } else if(modi == 4) {
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVEMCALPtRebin[i];
                } else {
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi08TeVPtRebin[i];
                }
            }

            Int_t nBinsPlot = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;

            fExampleBin         = 10;
            if( modi == 4 ) fExampleBin = 14;
            if (specialTrigg==1) fExampleBin = 22;
            if (specialTrigg==2) fExampleBin = 37;
        //*********************************************************************************************
        //********************************** Pi0 for pp 13TeV******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("13TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 6;
                fRow            = 5;
                if (fNBinsPt > 26) {
                    cout << "You have chosen Direct Photon Plots and more than 26 bins, this is not possible, it will be reduced to 26 bins." << endl;
                    fNBinsPt    = 26;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]         = fBinsPi013TeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi013TeVDirectPhotonPtRebin[i];
                }
                fNBinsPtDCAzDist    = 15;
                fBinsPtDCAzDist     = new Double_t[fNBinsPtDCAzDist+1];
                for (Int_t i = 0; i < fNBinsPtDCAzDist+1; i++) {
                    fBinsPtDCAzDist[i] = fBinsPi013TeVDirectPhotonPtDCAzDist[i];
                }
                fExampleBin     = 10;
            } else {
                fStartPtBin         = 1;
                fColumn             = 5;
                fRow                = 4;
                if (fNBinsPt < 17)
                    fColumn         = 4;
                if (fNBinsPt > 20) {
                    cout << "You have chosen to have more than 20 bins, this is not possible, it will be reduced to 20" << endl;
                    fNBinsPt        = 20;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]      = fBinsPi013TeVPt[i];
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsPi013TeVPtRebin[i];
                }
                Int_t nBinsPlot     = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot           = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
                fExampleBin         = 7;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 2.76TeV****************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("2.76TeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi02760GeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi02760GeVDirectPhotonPtRebin[i];
                }
                fExampleBin     = 5;
            } else {
                Int_t specialTrigg      = 0;
                TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
                
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold) 
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold) 
                    } else if ( trigger.CompareTo("51") == 0    ){
                        specialTrigg = 4; //L0 LHC11a
                    } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                        specialTrigg = 5; //INT7 LHC13g    
                    }
                } else {
                    specialTrigg        = triggerSet;
                }    
                fStartPtBin     = 1;
                if (modi == 2 && specialTrigg == 0) 
                    fStartPtBin = 3;
                else if (modi == 2 && specialTrigg == 1) 
                    fStartPtBin = 10;
                else if (modi == 4 && specialTrigg == 1) 
                    fStartPtBin = 13;
                else if (modi == 2 && specialTrigg == 2) 
                    fStartPtBin = 15;
                else if (modi == 4 && specialTrigg == 2) 
                    fStartPtBin = 16;
                else if (modi == 2 && specialTrigg == 3) 
                    fStartPtBin = 16;
                else if (modi == 4 && specialTrigg == 3) 
                    fStartPtBin = 18;
                else if (modi == 2 && specialTrigg == 4) 
                    fStartPtBin = 12;
                else if (modi == 4 && specialTrigg == 4) 
                    fStartPtBin = 15;
                else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 2) 
                    fStartPtBin = 17;
                else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1 && (specialTrigg == 0 || specialTrigg == 5))  
                    fStartPtBin = 21;
                else if (modi == 10 && ReturnClusterNLM(clusterCutSelection) == 1) 
                    fStartPtBin = 20;
                else if (modi == 4 ) 
                    fStartPtBin = 6;
                
                fColumn         = 6;
                fRow            = 4;
                if (fNBinsPt - fStartPtBin < 19) 
                    fColumn     = 5;
                if (fNBinsPt - fStartPtBin < 15){
                    fColumn     = 5;
                    fRow        = 3;
                }
                if (fNBinsPt - fStartPtBin < 12){
                    fColumn     = 4;
                    fRow        = 3;
                }
                if (fNBinsPt - fStartPtBin < 9){
                    fColumn     = 3;
                    fRow        = 3;
                }
                if (fNBinsPt > 19 && ( modi == 0 || modi == 1) && specialTrigg < 1) {
                    cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                    fNBinsPt    = 19;
                } else if (fNBinsPt > 24 &&  modi == 0  && specialTrigg > 0) {
                    cout << "You have chosen to have more than 19 bins, this is not possible, it will be reduced to 19" << endl;
                    fNBinsPt    = 24;    
                } else if (fNBinsPt > 24 && (modi == 2 || modi == 3) && specialTrigg == 0){
                    cout << "You have chosen to have more than 24 bins, this is not possible, it will be reduced to 24" << endl;
                    fNBinsPt    = 24;
                } else if (fNBinsPt > 29 && ( (modi == 2 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3)) || modi ==4)){
                    cout << "You have chosen to have more than 29 bins, this is not possible, it will be reduced to 29" << endl;
                    fNBinsPt    = 29;
                } else if (fNBinsPt > 28 &&  modi == 2 && specialTrigg == 3){
                    cout << "You have chosen to have more than 28 bins, this is not possible, it will be reduced to 28" << endl;
                    fNBinsPt    = 28;                    
                } else if (fNBinsPt > 25 && (modi == 2  && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 )) || (modi == 3 && specialTrigg == 4)){
                    cout << "You have chosen to have more than 25 bins, this is not possible, it will be reduced to 25" << endl;
                    fNBinsPt    = 25;
                } else if (fNBinsPt > 32 && (modi == 10)){
                    cout << "You have chosen to have more than 32 bins, this is not possible, it will be reduced to 32" << endl;
                    fNBinsPt    = 32;                    
                }
                    
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]          = fBinsPi02760GeVPt[i];
                    if ((modi == 2) && specialTrigg == 0 ){
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtRebin[i];
                    } else if ( modi == 4 && (specialTrigg == 1 || specialTrigg == 2 || specialTrigg == 3 || specialTrigg == 4 ) ) {
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVEMCALPtTrig13gRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig13g[i];
                    } else if ( modi == 2 && specialTrigg == 3 ) {
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig13gRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig13gConvEMCAL[i];
                    } else if ( modi == 2 && (specialTrigg == 4 || specialTrigg == 1 || specialTrigg == 2 ) ){        
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig11aRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];
                    } else if ( modi == 0 && (specialTrigg == 3 || specialTrigg == 1 || specialTrigg == 2 ) ){        
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVConvEMCALPtTrig11aRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtTrig11a[i];
                        
                    } else if ( modi == 10 ) {    
                        if (i < fNBinsPt+1) 
                            fNRebin[i]  = fBinsPi02760GeVPtMergedRebin[i];
                        fBinsPt[i]      = fBinsPi02760GeVPtMerged[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi02760GeVPtRebin[i];
                    }
                }
                Int_t nBinsPlot     = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot           = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
                fExampleBin         = 7;
                if ( (modi == 4) && (specialTrigg == 1 ||  specialTrigg == 4) ) 
                    fExampleBin         = 15;
                if ( (modi == 2) && (specialTrigg == 1  || specialTrigg == 4 ) ) 
                    fExampleBin         = 14;
                if ( (modi == 2) && (specialTrigg == 2 ) ) 
                    fExampleBin         = 16;
                if ( (modi == 2) && (specialTrigg == 3 ) ) 
                    fExampleBin         = 18;
                if ( (modi == 4) && (specialTrigg == 2 || specialTrigg == 3) ) 
                    fExampleBin         = 18;
                if ( (modi == 10) ) 
                    fExampleBin         = 20;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pp 0.9TeV*****************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("900GeV") == 0) {
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0900GeVDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0900GeVDirectPhotonPtRebin[i];
                }
                fExampleBin     = 5;
            } else {
                fStartPtBin     = 1;
                fColumn         = 4;
                fRow            = 3;

                if (fNBinsPt > 11) {
                    cout << "You have chosen to have more than 11 bins, this is not possible, it will be reduced to 11" << endl;
                    fNBinsPt    = 11;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0900GeVPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0900GeVPtRebin[i];
                }
                fExampleBin     = 4;
            }
        //*********************************************************************************************
        //********************************** Pi0 for PbPb 2.76TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) { 
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HIDirectPhotonPt[i];
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIDirectPhotonPtRebin[i];
                }
                fExampleBin     = 5;
            } else{
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 4;
                
                if (modi == 5) fStartPtBin = 4;
                
                if (fNBinsPt > 20){
                    fColumn     = 6;
                }
                
                if (fNBinsPt > 24) {
                    cout << "You have chosen to have more than 24 bins, this is not possible, it will be reduced to 24" << endl;
                    fNBinsPt    = 24;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0HIPtLHC11h[i]; 
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIPtLHC11hRebin[i]; 
//                                         fBinsPt[i]         = fBinsPi0HIPt[i];
//                                         if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0HIPtRebin[i];
                }
                fExampleBin     = 4;
            }
        //*********************************************************************************************
        //********************************** Pi0 for pPb 5.023TeV**************************************
        //*********************************************************************************************
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            if (directPhoton.CompareTo("directPhoton") == 0){
                fStartPtBin     = 1;
                fColumn         = 5;
                fRow            = 5;
                
                if (fNBinsPt > 21) {
                    cout << "You have chosen Direct Photon Plots and more than 21 bins, this is not possible, it will be reduced to 21 bins." << endl;
                    fNBinsPt    = 21;
                }
                for (Int_t i = 0; i < fNBinsPt+1; i++) {
                    fBinsPt[i]  = fBinsPi0pPbDirectPhotonPt[i];
                    if (i < fNBinsPt+1) 
                        fNRebin[i] = fBinsPi0pPbDirectPhotonPtRebin[i];
                }
                fExampleBin     = 5;
            } else {
                Int_t specialTrigg      = 0;
                TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
                
                if (triggerSet == -1){
                    if (trigger.CompareTo("52") == 0){
                        specialTrigg = 1;    // L0
                    } else if ( trigger.CompareTo("85") == 0 ){
                        specialTrigg = 2; //L1 G2 (lower threshold) 
                    } else if ( trigger.CompareTo("83") == 0    ){
                        specialTrigg = 3; //L1 G2 (lower threshold) 
                    }
                } else {
                    specialTrigg        = triggerSet;
                }    


                fStartPtBin     = 1;
                fColumn         = 7;
                fRow            = 5;

                if (modi == 2 && specialTrigg == 1){ 
                    fStartPtBin     = 14;
                    fColumn         = 6;
                    fRow            = 4;
                } else if (modi == 2 && specialTrigg == 2){ 
                    fStartPtBin     = 24;
                    fColumn         = 5;
                    fRow            = 4;
                } else if (modi == 2 && specialTrigg == 3){ 
                    fStartPtBin     = 29;
                    fColumn         = 5;
                    fRow            = 3;
                } else if (modi == 2){ 
                    fStartPtBin     = 6;
                    fColumn         = 6;
                } else if (modi == 4) {
                    fStartPtBin     = 5;
                } else if (modi == 5) {
                    fStartPtBin     = 8;
                }
                    
                TString MinBias = eventCutSelection(GetEventCentralityMinCutPosition(),2);
                if (fNBinsPt > 37 && specialTrigg == 0){
                    cout << "You have chosen to have more than 37 bins, this is not possible, it will be reduced to 37 for calo analysis" << endl;
                    fNBinsPt    = 37;                                        
                } else if (fNBinsPt > 42 ){
                    cout << "You have chosen to have more than 42 bins, this is not possible, it will be reduced to 42 for calo analysis" << endl;
                    fNBinsPt    = 42;                                                            
                }    
                
                Int_t nBinsPlot = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
                nBinsPlot       = fColumn*fRow -1;
                if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;

                for (Int_t i = 0; i < fNBinsPt+1; i++) {    
                    if (specialTrigg == 1 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigPtRebin[i];
                    } else if (specialTrigg == 2 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigPtRebin[i];
                    } else if (specialTrigg == 3 && modi == 2){
                        fBinsPt[i]  = fBinsPi0pPbPtEMCTrig[i];
                        fNRebin[i]  = fBinsPi0pPbConvEMCALTrigEG1PtRebin[i];
                    } else {
                        fBinsPt[i]  = fBinsPi0pPbPt[i];
                        if (i < fNBinsPt+1){
                            fNRebin[i]                         = fBinsPi0pPbPtRebin[i];
                            if (modi == 2 ) fNRebin[i]         = fBinsPi0pPbConvEMCALPtRebin[i];
                            if (modi == 3 ) fNRebin[i]         = fBinsPi0pPbConvPHOSPtRebin[i];
                            if (modi == 4 ) fNRebin[i]         = fBinsPi0pPbEMCALPtRebin[i];
                            if (modi == 5 ) fNRebin[i]         = fBinsPi0pPbPHOSPtRebin[i];
                        }
                    }    
                }
                fExampleBin         = 7;
                if (modi == 2 && specialTrigg == 1)
                    fExampleBin = 20;
                else if (modi == 2 && specialTrigg == 2)
                    fExampleBin = 26;
                else if (modi == 2 && specialTrigg == 3)
                    fExampleBin = 32;
                else if (modi == 4) 
                    fExampleBin = 25;
                else if (modi == 5) 
                    fExampleBin = 25;
            }
        }
    //*************************************************************************************************
    //********************************** Binning for Eta **********************************************
    //*************************************************************************************************        
    } else if (setPi0.CompareTo("Eta") == 0 || setPi0.CompareTo("Pi0EtaBinning") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[30];
        fNRebin                 = new Int_t[29];
        //*********************************************************************************************
        //********************************** Eta for pp 7TeV*******************************************
        //*********************************************************************************************
        if (energy.CompareTo("7TeV") == 0) {
            fStartPtBin         = 1;
            if (modi == 4 || modi == 2 ) fStartPtBin = 3;
            fColumn             = 5;
            fRow                = 3;
            
            if (fNBinsPt > 14) {
                cout << "You have chosen to have more than 14 bins for Eta, this is not possible, it will be reduced to 14" << endl;
                fNBinsPt        = 14;
            }
            for (Int_t i = 0; i < fNBinsPt+2; i++) {
                if (modi == 2 ) fBinsPt[i]      = fBinsEta7TeVConvEMCALPt[i];
                else fBinsPt[i]      = fBinsEta7TeVPt[i];
                if (modi == 2 ){ //|| modi == 4){
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsEta7TeVConvEMCALPtRebin[i];
                } else {
                    if (i < fNBinsPt+1)
                        fNRebin[i]  = fBinsEta7TeVPtRebin[i];
                }
            }
            fExampleBin         = 6;
        //*********************************************************************************************
        //********************************** Eta for pp 8TeV*******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("8TeV") == 0) {
            fStartPtBin         = 1;
            if (modi == 2 ) fStartPtBin = 3;
            if (modi == 4 ) fStartPtBin = 4;
            fColumn             = 4;
            fRow                = 3;
            
            if (fNBinsPt > 16 && modi != 2 && modi != 3 && modi != 4) {
                cout << "You have chosen to have more than 16 bins for Eta, this is not possible, it will be reduced to 16" << endl;
                fNBinsPt        = 16;
            } else if (fNBinsPt > 19 && (modi == 2 || modi == 3 || modi == 4)){
                cout << "You have chosen to have more than 19 bins for Eta, this is not possible, it will be reduced to 19" << endl;
                fNBinsPt        = 19;
            }
            for (Int_t i = 0; i < fNBinsPt+2; i++) {
                if ( modi == 2 ){
                    fBinsPt[i]      = fBinsEta8TeVConvEMCALPt[i];
                } else fBinsPt[i]      = fBinsEta8TeVPt[i];

                if ( modi == 2 ){
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVConvEMCALPtRebin[i];
                } else if ( modi == 4 ) {
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVEMCALPtRebin[i];
                } else {
                    if (i < fNBinsPt+1) fNRebin[i] = fBinsEta8TeVPtRebin[i];
                }
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            fExampleBin         = 6;
        //*********************************************************************************************
        //********************************** Eta for pp 13TeV******************************************
        //*********************************************************************************************
        } else if (energy.CompareTo("13TeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 3;
            fRow                = 3;
            if ((fNBinsPt-fStartPtBin) < 6) 
                fRow            = 2;
            if (fNBinsPt > 13) {
	      cout << "You have chosen to have more than 13 bins for Eta, this is not possible, it will be reduced to 13" << endl;
	      fNBinsPt        = 13;
            } 
            
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]      = fBinsEta13TeVPt[i];
                if (i < fNBinsPt+1) 
                    fNRebin[i]  = fBinsEta13TeVPtRebin[i];        
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            fExampleBin         = 4;                        
        //*********************************************************************************************
        //********************************** Eta for pp 2.76TeV****************************************
        //*********************************************************************************************    
        } else if (energy.CompareTo("2.76TeV") == 0) {
            Int_t specialTrigg  = 0;
            TString trigger     = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
            //LHC13g running with trigger
            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1;    // L0
                } else if ( trigger.CompareTo("85") == 0 ){
                    specialTrigg = 2; //L1 G2 (lower threshold) 
                } else if ( trigger.CompareTo("83") == 0    ){
                    specialTrigg = 3; //L1 G1 (lower threshold) 
                } else if ( trigger.CompareTo("51") == 0    ){
                    specialTrigg = 4; //L0 LHC11a
                } else if ( trigger.CompareTo("01") == 0  || trigger.CompareTo("00") == 0   ){
                    specialTrigg = 5; //INT7 LHC13g
                }
            } else {
                specialTrigg        = triggerSet;
            }    
            
            fStartPtBin         = 1;
            if ( modi == 3) 
                fStartPtBin     = 2;
            else if (modi == 2 && specialTrigg == 0) // MB, PCM-EMC
                fStartPtBin     = 2;
            else if (modi == 2 && specialTrigg == 5) { // INT7, PCM-EMC
                fStartPtBin     = 4;
            } else if (modi == 2 && specialTrigg == 1) // EMC7, PCM-EMC
                fStartPtBin     = 4;
            else if (modi == 2 && specialTrigg == 2) // L1 G2, PCM-EMC
                fStartPtBin     = 6;
            else if (modi == 2 && specialTrigg == 3) // L1 G1, PCM-EMC
                fStartPtBin     = 7;
            else if (modi == 2 && specialTrigg == 4) // EMC1, PCM-EMC
                fStartPtBin     = 4;
            else if (modi == 4 && specialTrigg == 1) 
                fStartPtBin     = 5;
            else if (modi == 4 && specialTrigg == 2) 
                fStartPtBin     = 6;
            else if (modi == 4 && specialTrigg == 3) 
                fStartPtBin     = 7;
            else if (modi == 4 && specialTrigg == 4) 
                fStartPtBin     = 6;
            else if (modi == 4 ) 
                fStartPtBin     = 4;
            else if (modi == 5 ) 
                fStartPtBin     = 3;
            fColumn             = 3;
            fRow                = 3;
            if ((fNBinsPt-fStartPtBin) < 6) 
                fRow            = 2;
            if ((fNBinsPt-fStartPtBin) < 4) 
                fColumn         = 2;

            if (fNBinsPt > 7 && (modi == 0 || modi == 1) && specialTrigg < 1) {
                cout << "You have chosen to have more than 7 bins for Eta, this is not possible, it will be reduced to 7" << endl;
                fNBinsPt        = 7;
            } else if (fNBinsPt > 13 && (modi == 2 || modi == 3 || modi == 4 || modi == 0)){
                cout << "You have chosen to have more than 13 bins for Eta, this is not possible, it will be reduced to 13" << endl;
                fNBinsPt        = 13;                                
            }
            
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if ( ( modi == 2 && specialTrigg == 0) ||
                     ( modi == 4 && specialTrigg == 0) ){
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtRebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( (modi == 2 && specialTrigg == 5)||
                            (modi == 4 && specialTrigg == 5)){
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtTrigINT7Rebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( (modi == 2 && specialTrigg == 4 ) ||
                            (modi == 4 && specialTrigg == 4 ) || 
                            (modi == 4 && specialTrigg == 2 ) ||
                            (modi == 4 && specialTrigg == 3 ) 
                          ){
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtTrig11aRebin[i];
                    } else { 
                        if (i < fNBinsPt+1){
                            fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtTrig11aRebin[i];
                        }
                    }
                } else if ( (modi == 2 && specialTrigg == 3 ) ||
                            (modi == 0 && specialTrigg > 0 )
                          ){
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtRebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                } else if ( modi == 2 && specialTrigg == 2 ){    
                    fBinsPt[i]  = fBinsEta2760GeVPtTrig11a[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVConvEMCALPtEG2Rebin[i];
                    } else { 
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVConvEMCALPtRebin[i];
                    }
                    
                } else {
                    fBinsPt[i]  = fBinsEta2760GeVPt[i];
                    if (setPi0.CompareTo("Eta") == 0){
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsEta2760GeVPtRebin[i];
                    } else {
                        if (i < fNBinsPt+1) fNRebin[i] = fBinsPi0EtaBinning2760GeVPtRebin[i];
                    }
                }
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;
            fExampleBin         = 4;
            if ( modi == 4 && specialTrigg == 1) 
                fExampleBin     = 5;
            else if ( (modi == 2) && (specialTrigg == 5)) 
                fExampleBin     = 4;
            else if ( (modi == 2 || modi == 4)    && (specialTrigg > 1)) 
                fExampleBin     = 7;
            if ( modi == 2 && specialTrigg == 3) 
                fExampleBin     = 9;
        //*********************************************************************************************
        //********************************** Eta for pp 0.9 TeV****************************************
        //*********************************************************************************************                    
        } else if (energy.CompareTo("900GeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 2;
            fRow                = 2;

            if (fNBinsPt > 3) {
                cout << "You have chosen to have more than 3 bins for Eta, this is not possible, it will be reduced to 3" << endl;
                fNBinsPt        = 3;
            }
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]      = fBinsEta900GeVPt[i];
                if (i < fNBinsPt+1) 
                    fNRebin[i]  = fBinsEta900GeVPtRebin[i];
            }
            fExampleBin         = 2;
        //*********************************************************************************************
        //********************************** Eta for PbPb 2.76TeV**************************************
        //*********************************************************************************************    
        } else if( energy.CompareTo("PbPb_2.76TeV") == 0) { 
            fStartPtBin         = 2;
            if (modi == 4) 
                fStartPtBin     = 6;
            fColumn             = 3;
            fRow                = 3;
            
            if (modi != 4 && modi != 2 &&    fNBinsPt > 13) {
                cout << "You have chosen to have more than 13 bins, this is not possible, it will be reduced to 13" << endl;
                fNBinsPt        = 13;
            }
            if (modi == 4 || modi == 2) 
                fColumn         = 5;
            if ((modi == 4 || modi == 2) &&    fNBinsPt > 15) {
                cout << "You have chosen to have more than 15 bins, this is not possible, it will be reduced to 15" << endl;
                fNBinsPt        = 15;
            }
            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                fBinsPt[i]         = fBinsEtaHIPtLHC11hLessBins[i]; //fBinsEtaHIPtLHC11h[i];
                if (i < fNBinsPt+1) fNRebin[i] = fBinsEtaHIPtRebinLHC11hLessBins[i]; // fBinsEtaHIPtRebinLHC11h[i]; //fBinsEtaHIPtRebinLHC11hFinerBinning[i];
            } 
            fExampleBin         = 4;
        //*********************************************************************************************
        //********************************** Eta for pPb 5.023TeV**************************************
        //*********************************************************************************************                
        } else if( energy.CompareTo("pPb_5.023TeV") == 0) { 
            Int_t specialTrigg      = 0;
            TString trigger         = eventCutSelection(GetEventSelectSpecialTriggerCutPosition(),2);
            
            if (triggerSet == -1){
                if (trigger.CompareTo("52") == 0){
                    specialTrigg = 1;    // L0
                } else if ( trigger.CompareTo("85") == 0 ){
                    specialTrigg = 2; //L1 G2 (lower threshold) 
                } else if ( trigger.CompareTo("83") == 0    ){
                    specialTrigg = 3; //L1 G2 (lower threshold) 
                }
            } else {
                specialTrigg        = triggerSet;
            }    

            fStartPtBin         = 3;
            fColumn             = 5;
            fRow                = 3;
            if (modi == 2 && specialTrigg == 1){ 
                fStartPtBin     = 11;
                fColumn         = 4;
                fRow            = 3;
            } else if (modi == 2 && specialTrigg == 2){ 
                fStartPtBin     = 16;
                fColumn         = 4;
                fRow            = 3;
            } else if (modi == 2 && specialTrigg == 3){ 
                fStartPtBin     = 19;
                fColumn         = 3;
                fRow            = 3;
            } else if (modi == 2){ 
                fStartPtBin     = 5;
            } else if (modi == 3) {
                fStartPtBin     = 7;
            } else if (modi == 4) {
                fStartPtBin     = 8;
            } else if (modi == 5) {
                fStartPtBin     = 8;
            }
                
            if (fNBinsPt > 16 && modi < 2) {
                cout << "You have chosen to have more than 16 bins, this is not possible, it will be reduced to 16" << endl;
                fNBinsPt        = 16;
            } else if (fNBinsPt > 22 && specialTrigg == 0){        
                cout << "You have chosen to have more than 22 bins, this is not possible, it will be reduced to 22" << endl;
                fNBinsPt        = 22;
            } else if (fNBinsPt > 26 ){
                cout << "You have chosen to have more than 26 bins, this is not possible, it will be reduced to 26" << endl;
                fNBinsPt        = 26;
                
            }
            Int_t nBinsPlot     = fColumn*fRow -1;
            cout << nBinsPlot << endl;

            if (fNBinsPt-fStartPtBin > nBinsPlot) fColumn++;
            nBinsPlot           = fColumn*fRow -1;
            cout << nBinsPlot << endl;
            if (fNBinsPt-fStartPtBin > nBinsPlot) fRow++;                        
            cout << fColumn << "\t" << fRow<< endl;

            for (Int_t i = 0; i < fNBinsPt+1; i++) {
                if (modi == 2 && specialTrigg == 1){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigEMC7PtRebin[i];
                    }
                } else if (modi == 2 && specialTrigg == 2){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigEG2PtRebin[i];
                    }    
                } else if (modi == 2 && specialTrigg == 3){
                    fBinsPt[i]      = fBinsEtapPbPtEMCTrig[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbConvEMCALTrigPtRebin[i];
                    }    
                } else {
                    fBinsPt[i]      = fBinsEtapPbPt[i];
                    if (i < fNBinsPt+1){                  
                        fNRebin[i]  = fBinsEtapPbPtRebin[i];
                        if (modi == 2) 
                            fNRebin[i]  = fBinsEtapPbConvEMCALPtRebin[i];
                        if (modi == 3)
                            fNRebin[i]  = fBinsEtapPbConvPHOSPtRebin[i];
                        if (modi == 4) 
                            fNRebin[i]  = fBinsEtapPbEMCALPtRebin[i];
                        if (modi == 5) 
                            fNRebin[i]  = fBinsEtapPbPHOSPtRebin[i];
                    }    
                }   
            }
            fExampleBin         = 6;
            if (modi == 2 && (specialTrigg == 1  || specialTrigg == 2 || specialTrigg == 3)){
                fExampleBin     = fStartPtBin+1;
            } else if (modi == 2 || modi == 3)  {
                fExampleBin     = fStartPtBin+1;
            } else if (modi == 4) {
                fExampleBin     = fStartPtBin+2;
            } else if (modi == 5){      
                fExampleBin     = fStartPtBin+2;
            }    
        }
    //*************************************************************************************************
    //********************************** Binning for Eta' *********************************************
    //*************************************************************************************************        
    } else if (setPi0.CompareTo("EtaPrim") == 0){
        fNBinsPt                = numberOfBins;
        fBinsPt                 = new Double_t[20];
        fNRebin                 = new Int_t[19];
        //*********************************************************************************************
        //********************************** Eta' for pp 7TeV *****************************************
        //*********************************************************************************************                
        if (energy.CompareTo("7TeV") == 0) {
            fStartPtBin         = 1;
            fColumn             = 3;
            fRow                = 3;

            if (fNBinsPt > 7) {
                cout << "You have chosen directphoton Plots and more than 7 bins for Eta, this is not possible, it will be reduced to 7 bins." << endl;
                fNBinsPt        = 7;
            }
            for (Int_t i = 0; i < fNBinsPt+2; i++) {
                fBinsPt[i]      = fBinsEtaPrim7TeVPt[i];
                if (i < fNBinsPt+1) 
                    fNRebin[i]  = fBinsEtaPrim7TeVPtRebin[i];
            }
            fExampleBin         = 3;
        }
    }
}

//*************************************************************************************************
//******************** GetBinning for general combination *****************************************
//*************************************************************************************************
Int_t GetBinning(   Double_t*  binning,
                    TString   meson   = "Pi0",
                    TString   energy  = "2.76TeV",
                    Int_t     mode    = 2                      
                    ){

    Int_t maxNBins = 0;
    if (meson.CompareTo("Pi0")==0){
        if (energy.CompareTo("2.76TeV") == 0){
            if ( mode == 2 ){
                maxNBins = 25;
                for(Int_t i = 0; i < maxNBins; i++){
                    binning[i] = fBinsPi02760GeVPtTrigFullPCMEMC[i];
                } 
            } else if ( mode == 4){
                maxNBins = 27;
                for(Int_t i = 0; i < maxNBins; i++){
                    binning[i] = fBinsPi02760GeVPtTrig13g[i];
                }
            } else if ( mode == 10){
                maxNBins = 32;
                for(Int_t i = 0; i < maxNBins; i++){
                    binning[i] = fBinsPi02760GeVPtMerged[i];
                }               
            } else if (mode == 20){
                maxNBins = 33;
                for(Int_t i = 0; i < maxNBins+1; i++){
                    binning[i] = fBinsPi02760GeVFullHaitoMerged[i];
                }
            }
        }
    } else if (meson.Contains("Eta")){
        if (energy.CompareTo("2.76TeV") == 0){
            maxNBins = 13;
            for(Int_t i = 0; i < maxNBins; i++){
                binning[i] = fBinsEta2760GeVPtTrig11a[i];
            } 
        }
        
    }
    return maxNBins;
}
